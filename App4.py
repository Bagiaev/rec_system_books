import streamlit as st
import pandas as pd
from sqlalchemy import create_engine, text
from recommenderSVD import SVDRecommender
from recommenderTFIDF import ContentRecommender
from recommendedHybrid import HybridRecommender

# DB Connection
DB_URI = "postgresql://postgres:Ars8095835@localhost:5433/bookdb"
engine = create_engine(DB_URI)

# Load data
@st.cache_data
def load_books():
    return pd.read_sql("SELECT * FROM books;", engine)

@st.cache_data
def load_users():
    return pd.read_sql("SELECT * FROM users;", engine)

@st.cache_data
def load_ratings():
    return pd.read_sql("SELECT * FROM ratings;", engine)

books_df = load_books()
users_df = load_users()
ratings_df = load_ratings()

# Models
cf_model = SVDRecommender()
cb_model = ContentRecommender()
hybrid_model = HybridRecommender(books_df=books_df)

# App layout
st.set_page_config(page_title="Book Recommender", layout="wide")
st.title("üìö Book Recommendation System")

# Session state
if "page" not in st.session_state:
    st.session_state.page = "–ö–∞—Ç–∞–ª–æ–≥"
if "user_id" not in st.session_state:
    st.session_state.user_id = 99 # users_df.user_id.sample(1).iloc[0]  # —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
if "selected_book_isbn" not in st.session_state:
    st.session_state.selected_book_isbn = None
# st.sidebar.write(f"üìç Current page: {st.session_state.page}")

# Sidebar Navigation
pages = ["–ö–∞—Ç–∞–ª–æ–≥", "–ü—Ä–æ—Ñ–∏–ª—å", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
if st.session_state.page in pages:
    selected_page = st.sidebar.radio("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", pages, index=pages.index(st.session_state.page))
    if selected_page != st.session_state.page:
        st.session_state.page = selected_page
        st.rerun()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.sidebar.write(f"üìç Current page: {st.session_state.page}")

# Catalog Page
if st.session_state.page == "–ö–∞—Ç–∞–ª–æ–≥":
    st.subheader("üìñ –ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥")
    search = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É:")
    
    df = books_df.copy()
    if search:
        df = df[df.title.str.contains(search, case=False, na=False) | 
               df.author.str.contains(search, case=False, na=False)]
    
    for _, book in df.head(20).iterrows():
        with st.container():
            cols = st.columns([1, 3])
            with cols[0]:
                st.image(book.image_l if pd.notna(book.image_l) else "images/null_book.jpg", 
                         use_container_width=True)
            with cols[1]:
                st.subheader(book.title)
                st.write(f"**–ê–≤—Ç–æ—Ä:** {book.author}")
                st.write(f"**–ì–æ–¥:** {book.year if pd.notna(book.year) else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                st.write(f"**–ò–∑–¥–∞—Ç–µ–ª—å:** {book.publisher if pd.notna(book.publisher) else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                button_key = f"detail_{book.isbn}_{book.title}"
                if st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=button_key):
                    st.session_state.selected_book_isbn = book.isbn
                    st.session_state.page = "Detail"
                    st.rerun()

# Detail Page
elif st.session_state.page == "Detail" and st.session_state.selected_book_isbn:
    isbn = st.session_state.selected_book_isbn
    book = books_df[books_df.isbn == isbn].iloc[0]

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if st.button("‚Üê –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥"):
        st.session_state.page = "–ö–∞—Ç–∞–ª–æ–≥"
        st.rerun()
    
    cols = st.columns([1, 2])
    with cols[0]:
        st.image(book.image_l if pd.notna(book.image_l) else "images/null_book.jpg", 
                 width=300)
    with cols[1]:
        st.header(book.title)
        st.write(f"**–ê–≤—Ç–æ—Ä:** {book.author}")
        st.write(f"**–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è:** {book.year if pd.notna(book.year) else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        st.write(f"**–ò–∑–¥–∞—Ç–µ–ª—å:** {book.publisher if pd.notna(book.publisher) else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
    
    # –û—Ü–µ–Ω–∫–∞ –∫–Ω–∏–≥–∏
    st.subheader("‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∫–Ω–∏–≥—É")
    rating = st.slider("–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ (1-10)", 1, 10, 5)
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É"):
        with engine.connect() as conn:
            conn.execute(text("""
                INSERT INTO ratings(user_id, isbn, rating)
                VALUES(:u, :b, :r)
                ON CONFLICT (user_id, isbn)
                DO UPDATE SET rating = :r;
            """), {"u": int(st.session_state.user_id), "b": str(isbn), "r": int(rating)})
            conn.commit()
        st.success("–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        st.rerun()
    
    # –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ç–∞–±–∞—Ö
    tab1, tab2, tab3 = st.tabs(["–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"])
    
    with tab1:
        st.subheader("üìö –ü–æ—Ö–æ–∂–∏–µ –∫–Ω–∏–≥–∏ (–∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)")
        try:
            cb_recs = cb_model.get_recommendations(book.title)
            if isinstance(cb_recs, pd.DataFrame) and not cb_recs.empty:
                for _, rec in cb_recs.head(5).iterrows():
                    rec_book = books_df[books_df.title == rec['title']]
                    if not rec_book.empty:
                        rec_b = rec_book.iloc[0]
                        cols = st.columns([1, 4])
                        with cols[0]:
                            st.image(rec_b.image_m if pd.notna(rec_b.image_m) else "https://via.placeholder.com/100", 
                                     width=100)
                        with cols[1]:
                            st.write(f"**{rec_b.title}**")
                            st.write(f"–ê–≤—Ç–æ—Ä: {rec_b.author}")
                            st.write(f"–ì–æ–¥: {rec_b.year if pd.notna(rec_b.year) else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
    
    with tab2:
        st.subheader("üë• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å (–∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)")
        try:
            cf_recs = cf_model.recommend_books(st.session_state.user_id)
            if not cf_recs.empty:
                for _, row in cf_recs.head(5).iterrows():
                    match = books_df[books_df.isbn == row['isbn']] if 'isbn' in row else books_df[books_df.title == row['title']]
                    if not match.empty:
                        b = match.iloc[0]
                        cols = st.columns([1, 4])
                        with cols[0]:
                            st.image(b.image_m if pd.notna(b.image_m) else "https://via.placeholder.com/100", 
                                     width=100)
                        with cols[1]:
                            st.write(f"**{b.title}**")
                            st.write(f"–ê–≤—Ç–æ—Ä: {b.author}")
                            st.write(f"–ì–æ–¥: {b.year if pd.notna(b.year) else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π CF: {e}")
    
    with tab3:
        st.subheader("‚ú® –ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        try:
            hybrid_recs = hybrid_model.recommend(st.session_state.user_id, book.title)
            if not hybrid_recs.empty:
                for _, row in hybrid_recs.head(5).iterrows():
                    match = books_df[books_df.title == row['title']]
                    if not match.empty:
                        b = match.iloc[0]
                        cols = st.columns([1, 4])
                        with cols[0]:
                            st.image(b.image_m if pd.notna(b.image_m) else "https://via.placeholder.com/", 
                                    )
                        with cols[1]:
                            st.write(f"**{b.title}**")
                            st.write(f"–ê–≤—Ç–æ—Ä: {b.author}")
                            st.write(f"–ì–æ–¥: {b.year if pd.notna(b.year) else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")

# Profile Page
elif st.session_state.page == "–ü—Ä–æ—Ñ–∏–ª—å":
    st.subheader("üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    user = users_df[users_df.user_id == st.session_state.user_id].iloc[0]
    st.write(f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {user.user_id}")
    st.write(f"**–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {user.location if pd.notna(user.location) else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
    st.write(f"**–í–æ–∑—Ä–∞—Å—Ç:** {user.age if pd.notna(user.age) else '–ù–µ —É–∫–∞–∑–∞–Ω'}")

    st.subheader("üìö –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏")
    user_ratings = ratings_df[ratings_df.user_id == user.user_id]
    if not user_ratings.empty:
        merged = user_ratings.merge(books_df, on="isbn")
        for _, row in merged.iterrows():
            with st.expander(f"{row['title']} - {row['rating']}/10"):
                cols = st.columns([1, 4])
                with cols[0]:
                    st.image(row['image_m'] if pd.notna(row['image_m']) else "https://via.placeholder.com/100", 
                             width=100)
                with cols[1]:
                    st.write(f"**–ê–≤—Ç–æ—Ä:** {row['author']}")
                    st.write(f"**–ì–æ–¥:** {row['year'] if pd.notna(row['year']) else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
    else:
        st.info("–í—ã –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏")

# Recommendations Page
elif st.session_state.page == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
    st.subheader("üîÆ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    tab1, tab2 = st.tabs(["–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"])
    
    with tab1:
        st.subheader("üë• –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")
        try:
            cf_recs = cf_model.recommend_books(st.session_state.user_id)
            if not cf_recs.empty:
                for _, row in cf_recs.head(10).iterrows():
                    match = books_df[books_df.isbn == row['isbn']] if 'isbn' in row else books_df[books_df.title == row['title']]
                    if not match.empty:
                        b = match.iloc[0]
                        cols = st.columns([1, 4])
                        with cols[0]:
                            st.image(b.image_m if pd.notna(b.image_m) else "https://via.placeholder.com/100", 
                                     width=100)
                        with cols[1]:
                            st.write(f"**{b.title}**")
                            st.write(f"–ê–≤—Ç–æ—Ä: {b.author}")
                            st.write(f"–ì–æ–¥: {b.year if pd.notna(b.year) else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                            if st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"rec_cf_{b.isbn}"):
                                st.session_state.selected_book_isbn = b.isbn
                                st.session_state.page = "Detail"
                                st.rerun()
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
    
    with tab2:
        st.subheader("‚ú® –ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–∏–≥—É –∏–∑ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            rated_books = ratings_df[ratings_df.user_id == st.session_state.user_id]
            if not rated_books.empty:
                sample_book = rated_books.sample(1).iloc[0]
                book_title = books_df[books_df.isbn == sample_book.isbn].iloc[0].title
                hybrid_recs = hybrid_model.recommend(st.session_state.user_id, book_title)
                
                if not hybrid_recs.empty:
                    for _, row in hybrid_recs.head(10).iterrows():
                        match = books_df[books_df.title == row['title']]
                        if not match.empty:
                            b = match.iloc[0]
                            cols = st.columns([1, 4])
                            with cols[0]:
                                st.image(b.image_m if pd.notna(b.image_m) else "https://via.placeholder.com/100", 
                                         width=100)
                            with cols[1]:
                                st.write(f"**{b.title}**")
                                st.write(f"–ê–≤—Ç–æ—Ä: {b.author}")
                                st.write(f"–ì–æ–¥: {b.year if pd.notna(b.year) else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                                if st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"rec_hybrid_{b.isbn}"):
                                    st.session_state.selected_book_isbn = b.isbn
                                    st.session_state.page = "Detail"
                                    st.rerun()
                else:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            else:
                st.info("–û—Ü–µ–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")